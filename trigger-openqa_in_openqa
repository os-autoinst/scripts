#!/bin/bash -ex

set -euo pipefail

# shellcheck source=/dev/null
. "$(dirname "$0")"/_common

# configuration variables with defaults.
target_host="${target_host:-"openqa.opensuse.org"}"
target_host_proto="${target_host_proto:-"https"}"
dry_run="${dry_run:-"0"}"
tw_openqa_host="${tw_openqa_host:-"https://openqa.opensuse.org"}"
tw_group_id="${tw_group_id:-"1"}"
openqa_cli="${openqa_cli:-"openqa-cli"}"
arch="${arch:-"x86_64"}"
machine="${machine:-"64bit"}"
build_tag=${BUILD_TAG:-}
client_prefix=${client_prefix:-}
full_run=${FULL:-}
group_id="${group_id:-"openQA"}"

usage() {
    cat << EOF
Usage: $0 [OPTIONS]

Triggers tests on an openQA instance testing openQA itself.

Can be configured additionally with environment variables.

Options:
 -h, --help         display this help
EOF
    exit "$1"
}

main() {
    opts=$(getopt -o h -l help -n "$0" -- "$@") || usage 1
    eval set -- "$opts"
    while true; do
        case "$1" in
            -h | --help) usage 0 ;;
            --)
                shift
                break
                ;;
            *) break ;;
        esac
    done
    [ "$dry_run" = "1" ] && client_prefix="echo"
    local qcow build
    download_scenario
    download_latest_published_tumbleweed_image
    trigger
}

download_latest_published_tumbleweed_image() {
    qcow=$(find_latest_published_tumbleweed_image "$tw_group_id" "$arch" "$machine" qcow)
    if [ "$target_host_proto://$target_host" != "$tw_openqa_host" ]; then
        url="${tw_openqa_host}/assets/hdd/${qcow}"

        # instead of manual wget it should also work to provide a whitelisted url to openqa as HDD_1_URL which should then download it itself but a first experiment didn't work
        ${client_prefix} wget -c "$url" -O /var/lib/openqa/factory/hdd/"$qcow"
    fi
    # ensure the build tag conforms to coolo's unwritten rules for the openQA dashboard
    build=$(echo "$build_tag" | sed -e "s/jenkins-trigger-openQA_in_openQA-/:/" -e "s/-/./g")
}

download_scenario() {
    rm -f /var/tmp/sd.yaml
    curl https://raw.githubusercontent.com/os-autoinst/os-autoinst-distri-openQA/master/scenario-definitions.yaml -o /var/tmp/sd.yaml
}

trigger() {
    # prevent host access problem when running within o3 infrastructure
    # where o3 is not reachable over https
    declare -a ARGS
    if [ "$target_host" = "openqa.opensuse.org" ]; then
        ARGS=("OPENQA_HOST=http://openqa.opensuse.org")
    fi
    # in full run use only openqa_install+publish test
    if [ "$full_run" ]; then
        ARGS+=('TEST=openqa_install+publish' "FULL_OPENSUSE_TEST=1")
    fi

    ${client_prefix} "${openqa_cli}" \
        schedule --host "${target_host_proto}://${target_host}" \
        --param-file SCENARIO_DEFINITIONS_YAML=/var/tmp/sd.yaml \
        VERSION=Tumbleweed \
        DISTRI=openqa FLAVOR=dev ARCH="${arch}" \
        HDD_1="$qcow" BUILD="${build}" _GROUP="${group_id}" \
        "${ARGS[@]}" \
        | tee job_post_response
}

caller 0 > /dev/null || main "$@"
