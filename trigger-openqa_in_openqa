#!/bin/bash -ex

# Trigger tests on an openQA instance testing openQA itself.
#
# Can be configured by variables.

set -euo pipefail

# configuration variables with defaults.
color=${color:-auto}
target_host="${target_host:-"openqa.opensuse.org"}"
target_host_proto="${target_host_proto:-"https"}"
dry_run="${dry_run:-"0"}"
tw_openqa_host="${tw_openqa_host:-"https://openqa.opensuse.org"}"
tw_group_id="${tw_group_id:-"1"}"
openqa_cli="${openqa_cli:-"openqa-cli"}"
arch="${arch:-"x86_64"}"
machine="${machine:-"64bit"}"
build_tag=${BUILD_TAG:-}
client_prefix=${client_prefix:-}
full_run=${FULL:-}
group_id="${group_id:-"openQA"}"
osc=${osc:-osc}
src_project=${src_project:-devel:openQA}
staging_project=${staging_project:-${src_project}:testing}
dst_project=${dst_project:-${src_project}:tested}
build_day_limit="${build_day_limit:-"3"}"

# shellcheck source=/dev/null
. "$(dirname "$0")"/_common

main() {
    [[ $dry_run == 1 ]] && client_prefix="echo" osc="echo $osc"
    local qcow build
    download_scenario
    download_latest_published_tumbleweed_image

    #  Only use devel:openQA:testing for the hourly runs which we monitor
    # and use for submit requests
    if [[ $full_run ]]; then
        staging_project=$src_project
    else
        create_devel_openqa_snapshot
    fi
    trigger
}

download_latest_published_tumbleweed_image() {
    local build_date
    local skip_job_older_than_days
    skip_job_older_than_days=$(date -d "${build_day_limit} days ago" +%d)
    qcow=$(find_latest_published_tumbleweed_image "$tw_group_id" "$arch" "$machine" qcow)
    build_date=$(date -d "$(echo "$qcow" | grep -o -P '\d{8}')" +%d)
    if [[ $build_date -lt "$skip_job_older_than_days" ]]; then
        echo "** Skipping because the most recently published TW build is older than $build_day_limit days. **"
        exit 0
    fi
    if [ "$target_host_proto://$target_host" != "$tw_openqa_host" ]; then
        url="${tw_openqa_host}/assets/hdd/${qcow}"

        # instead of manual wget it should also work to provide a whitelisted url to openqa as HDD_1_URL which should then download it itself but a first experiment didn't work
        ${client_prefix} wget -c "$url" -O /var/lib/openqa/factory/hdd/"$qcow"
    fi
    # ensure the build tag conforms to coolo's unwritten rules for the openQA dashboard
    build=$(echo "$build_tag" | sed -e "s/jenkins-trigger-openQA_in_openQA-/:/" -e "s/-/./g")
}

download_scenario() {
    rm -f /var/tmp/sd.yaml
    curl https://raw.githubusercontent.com/os-autoinst/os-autoinst-distri-openQA/master/scenario-definitions.yaml -o /var/tmp/sd.yaml
}

create_snapshots() {
    local package=$1
    log-info "Creating snapshots of $package"
    $osc release --no-delay --target-project "$staging_project" --target-repository=openSUSE_Tumbleweed -r openSUSE_Tumbleweed -a x86_64 "$src_project" "$package"
}

create_devel_openqa_snapshot() {
    local auto_submit_packages staged_packages
    auto_submit_packages=$(list_packages "$dst_project")
    staged_packages=$(list_packages "$staging_project") || true # osc ls returns non-zero return code for empty projects
    if [[ $staged_packages ]]; then
        echo "Only triggering tests from $src_project (not overriding $staging_project and doing a submission) because $staging_project still contains packages: $staged_packages" \
            | tee job_post_skip_submission
        staging_project=$src_project
        return
    elif [[ -e job_post_skip_submission ]]; then
        rm job_post_skip_submission
    fi
    log-info "Checking if all relevant packages are built and published before creating snapshot under $staging_project"
    for package in $auto_submit_packages; do
        local state
        state=$($osc results -r openSUSE_Tumbleweed -a x86_64 --no-multibuild "$src_project" "$package")
        if grep -q -v 'succeeded\|disabled' <<< "$state"; then
            echo -e "Package $package is not yet ready for release\n$state" | tee job_post_skip_submission
            delete_packages_from_obs_project "$staging_project"
            return
        fi
        create_snapshots "$package"
    done
    log-info "Wait until all packages are published under $staging_project"
    $osc prjresults --watch --xml -r openSUSE_Tumbleweed -a x86_64 "$staging_project"
}

trigger() {
    # prevent host access problem when running within o3 infrastructure
    # where o3 is not reachable over https
    declare -a ARGS
    if [ "$target_host" = "openqa.opensuse.org" ]; then
        ARGS=("OPENQA_HOST=http://openqa.opensuse.org")
    fi
    # in full run use only openqa_install+publish test
    if [ "$full_run" ]; then
        ARGS+=('TEST=openqa_install+publish' "FULL_OPENSUSE_TEST=1")
    fi

    ${client_prefix} "${openqa_cli}" \
        schedule --host "${target_host_proto}://${target_host}" \
        --param-file SCENARIO_DEFINITIONS_YAML=/var/tmp/sd.yaml \
        VERSION=Tumbleweed \
        DISTRI=openqa FLAVOR=dev ARCH="${arch}" \
        HDD_1="$qcow" BUILD="${build}" _GROUP="${group_id}" \
        OPENQA_OBS_PROJECT="$staging_project" \
        "${ARGS[@]}" \
        | tee full_job_post_response
    head -1 full_job_post_response > job_post_response
    rm full_job_post_response
}

main
